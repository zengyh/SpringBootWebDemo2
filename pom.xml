<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>codex.terry</groupId>
	<artifactId>SpringBootWebDemo2</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging> <!-- 必须打包war，否则访问不了jsp页面，Spring Boot对Jsp不是很支持-->

	<name>SpringBootWebDemo2</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<oracle.jdbc.version>10.2.0.4.0</oracle.jdbc.version>
		<lombok.version>1.16.8</lombok.version>
		<srpingboot.log4j.version>1.3.8.RELEASE</srpingboot.log4j.version>
        <com.lmax.disruptor>3.3.6</com.lmax.disruptor>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<!-- 排除（不使用）自带的Logback日志工具依赖，为了项目使用Log4j2日志打印工具 -->
			    <exclusion>
				     <groupId>org.springframework.boot</groupId>
				     <artifactId>spring-boot-starter-logging</artifactId>
			    </exclusion>
				<!--排除（不使用）SpringBoot内嵌的Tomcat，项目使用外置的Tomcat-->
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- 添加第三方jar包，ODBC 驱动包 -->
		<!--      第三包jar包，既Maven仓库上没有的jar包，只能网上找其它资源下载的 -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc8</artifactId>
			<scope>system</scope>
			<systemPath>${project.basedir}/libs/ojdbc8.jar</systemPath>
            <version>8</version> <!-- 随便配置的版本号，不配置编译打包等会报错 -->
		</dependency>
		<!-- end -->
		<!-- lombok插件，编译时自动注入代码到字节码，使用方式注解方式：@Data、@NoArgsConstructor等等 -->
		<!-- 用途：编译时，自动生成Bean的Getter、Setter方法，生成构造函数等等，提高开发效率，减少代码量 -->
		<!-- 不使用该插件，也可以去掉这个依赖包 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>
		<!-- end -->
        <!-- 导入log4j2依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <!-- end -->
        <!-- log4j2支持异步日志，导入disruptor依赖，不需要支持异步日志，也可以去掉该依赖包 -->
        <dependency>
           <groupId>com.lmax</groupId>
           <artifactId>disruptor</artifactId>
           <version>${com.lmax.disruptor}</version>
        </dependency>
        <!-- end -->
		<!-- servlet 依赖 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<!-- end -->
		<!-- 导入Thymeleaf 模板引擎依赖，不使用该模板引擎，可以去除该依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<!-- end -->
        <!-- 热部署，项目修改代码，不需要重启服务器，开发的时候推荐使用，部署到生产可以去掉-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- optional=true，当project-A 依赖project-B,  project-B 依赖project-D时，
                    则project-A不依赖project-D
                    默认<optional>的值为false,必须依赖  -->
            <optional>true</optional>
        </dependency>
        <!-- end -->
	</dependencies>

	<!--实现多环境配置打包-->
	<profiles>
		<!--开发环境-->
		<profile>
			<id>dev</id>
	        <properties>
				<active.profile>dev</active.profile>
	        </properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<!-- end -->
	    <!--测试环境-->
		<profile>
			<id>test</id>
			<properties>
				<active.profile>test</active.profile>
			</properties>
		</profile>
		<!-- end -->
		<!--生产环境-->
		<profile>
			<id>prod</id>
			<properties>
				<active.profile>prod</active.profile>
			</properties>
		</profile>
		<!-- end -->		
	</profiles>
	
	<build>
		<!-- 项目打包（packaging）后的文件名，去掉了后缀 -->
	    <finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<!-- filtering必须为true，才可以使用环境变量、pom文件里定义的属性和指定配置文件里的属性来替换属性文件(*.properties)里的变量 -->
				<filtering>true</filtering> 
			</resource>
			<!-- Maven只打包src/main/profile目录下的application-${active.profile}.properties和log4j2-${active.profile}.xml文件-->
			<resource>
				<directory>src/main/profiles</directory>
				<includes>
					<include>**/application-${active.profile}.properties</include>
					<include>**/log4j2-${active.profile}.xml</include>
				</includes>
				<!-- filtering必须为true，才可以使用环境变量、pom文件里定义的属性和指定配置文件里的属性来替换属性文件(*.properties)里的变量 -->
				<filtering>true</filtering>
			</resource>
			<!-- end -->
			<!-- 将libs/目录下的第三方jar包也打包进项目，只对将项目打包成jar形式的文件有效！ -->
			<!--      第三包jar包，既Maven仓库上没有的jar包，只能网上找其它资源下载的 -->
			<!--      如果项目不打包成jar包，则可以去掉该项配置，否则必须配置-->
			<!--
			<resource>
				<directory>libs</directory>
				<includes>
					<include>**/*.jar</include>
				</includes>
				<targetPath>BOOT-INF/lib/</targetPath>
			</resource>
			-->
			<!-- end -->
			<resource>
				<directory>src/main/webapp</directory>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<!-- 配置资源文件中的变量分隔符（标识符），这里配置了两种变量分隔符 -->
					<delimiters>
						<delimiter>${*}</delimiter> <!-- 以${}为分隔符，例如 ${jdbc.url}  -->
						<delimiter>@</delimiter>    <!-- 以@为分隔符，例如 @jdbc.url@ -->
					</delimiters>
				</configuration>
			</plugin>
			<!-- end -->
			<!--maven-war-plugins插件，将libs/目录下的第三方jar包也打包进项目，只对将项目打包成war形式的文件有效！-->
			<!--      第三包jar包，既Maven仓库上没有的jar包，只能网上找其它资源下载的 -->
			<!--      如果项目不打包成jar包，则可以去掉该项配置，否则必须配置-->
            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<webResources>
						<resource>
							<directory>libs</directory>
							<targetPath>WEB-INF/lib/</targetPath>
							<includes>
								<include>**/*.jar</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<!-- end -->
			<!-- compile、test、package等操作之前都先进行clean，所以无需手动clean -->
			<!-- 目前没有问题，假设以后该插件的配置不兼容了，可以去掉！-->
			<!-- 如果去掉了该项配置，就需要执行这些步骤之前，手动【clean】以下， -->
			<!--   否则，打包的资源文件里面，会包含多个环境(profile)的properties，虽然不影响程序运行，但是且包含了不必要（别的环境）的配置文件！！-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<executions>
					<execution>
                        <phase>validate</phase>
						<goals>
							<goal>clean</goal>
						</goals>
                    </execution>
				</executions>
			</plugin>
			<!-- end -->
		</plugins>
	</build>

	<!-- repositories 配置远程仓库 -->
	<!-- 1、先从settings.xml配置的仓库<repositories>中下载构建（即jar包），如果没有该构建，则从pom.xml的<repositories>中下载-->
	<!-- 2、构建的下载，按照配置的仓库的先后顺序来查找和下载-->
	<!-- 3、【特别注意】 如果 settings.xml配置了mirrors镜像仓库，则该配置无效！【不】会从pom.xml的<repositories>中下载，只会从mirrors镜像仓库中查找下载！-->
	<repositories>
	    <repository>
	        <id>nexus-aliyun</id>
	        <name>Nexus aliyun</name>
	        <url>http://maven.aliyun.com/nexus/content/groups/public</url>
	        <releases>
	            <enabled>true</enabled>
	        </releases>
	        <snapshots>
	            <enabled>false</enabled>
	        </snapshots>
	    </repository>
	    <repository>
	        <id>Central2</id>
	        <name>Central Repository</name>
	        <url>http://central.maven.org/maven2</url>
	        <releases>
	            <enabled>true</enabled>
	        </releases>
	        <snapshots>
	            <enabled>false</enabled>
	        </snapshots>
	    </repository>
	</repositories>
    <pluginRepositories>
        <pluginRepository>
	        <id>nexus-aliyun</id>
	        <name>Nexus aliyun</name>
	        <url>http://maven.aliyun.com/nexus/content/groups/public</url>
	        <releases>
	            <enabled>true</enabled>
	        </releases>
	        <snapshots>
	            <enabled>false</enabled>
	        </snapshots>
        </pluginRepository>
        <pluginRepository>
	        <id>Central2</id>
	        <name>Central Repository</name>
	        <url>http://central.maven.org/maven2</url>
	        <releases>
	            <enabled>true</enabled>
	        </releases>
	        <snapshots>
	            <enabled>false</enabled>
	        </snapshots>
        </pluginRepository>
    </pluginRepositories>
	
</project>
